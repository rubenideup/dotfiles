" file warmups
autocmd BufNewFile *.go  s-^-package main\r\rimport "fmt"\r\rfunc main() {\r\r}-
autocmd BufNewFile *.pm  s-^-package XXX;\r\ruse strict;\ruse warnings;\r\r1;-
autocmd BufNewFile *.pl  s-^-#!/usr/bin/perl\r\ruse strict;\ruse warnings;\r\r-
autocmd BufNewFile *.sh  s-^-#!/bin/bash\r\r-
autocmd BufNewFile *.py  s-^-#!/usr/bin/python\r\r-
autocmd BufNewFile *.rb  s-^-#charset: utf-8\r\r-
autocmd BufNewFile *.c   s-^-#include <stdio.h>\r\rint main(int argc, char** argv) {\r\treturn 0;\r}-
autocmd BufNewFile *.cpp s-^-#include <iostream>\r\rusing namespace std;\r\rint main(int argc, char* argv[]) {\r\treturn 0;\r}-
autocmd BufNewFile *.php s-^-<?php\r\r-

" remove trailing spaces
function! <SID>StripTrailingWhitespaces()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

" Reformat PHP code following these style rules:
" - In control structures place opening brace in same line separated by one space
" - In methods/functions place opening brace in new line
" - In control structures place a space between keyword and parentheses
function! <SID>CodeStylingPHP()
    " Preparation: save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/){$/) {/e
    %s/function\(\s\+\S\+\)(\(.*\))\s*{$/function\1(\2)\r\t{/e
    %s/\(\s\+if\|\s\+for\|\s\+foreach\|\s\+while\|\s\+do\|\s\+switch\|\s\+catch\)(/\1 (/e
    %s/\(\s\+else\|\s\+try\){$/\1 {/e
    %s/}catch/} catch/e
    retab
    " Clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

autocmd BufWritePre *.py                     :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.{rb,erb}               :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.sh                     :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.{js,json}              :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.css                    :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.{php,twig,ctp,yml}     :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.php                    :call <SID>CodeStylingPHP()
autocmd BufWritePre *.sql                    :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.{html,htm,xml,xsd,xsl} :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre *.{c,cpp,h,hpp}          :call <SID>StripTrailingWhitespaces()

" Twig syntax colors
autocmd BufRead *.twig set filetype=htmltwig

" folding settings
autocmd FileType xml setlocal foldmethod=indent foldlevel=1
autocmd FileType cpp,hpp set foldlevel=1 foldmethod=syntax foldnestmax=3 foldcolumn=4
autocmd FileType ruby,eruby,javascript set foldmethod=indent foldlevel=1 foldnestmax=2 foldcolumn=4 

" decrease XML, HTML and Twig tabs to 2 spaces
autocmd FileType xml,html,htmltwig,eruby set tabstop=2 shiftwidth=2

" set textwidth to 80 columns in txt files
autocmd FileType txt set textwidth=80

" view special characters
autocmd FileType xhtml,html,xml,php,yaml,htmltwig,cpp,hpp,ruby,eruby,javascript set list
autocmd FileType xhtml,html,xml set listchars=tab:▸\ 
autocmd FileType php,yaml,htmltwig,cpp,hpp,ruby,eruby,javascript set listchars=tab:▸\ ,eol:¬

" Remember last location in file
au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif

" save and restore current file view (folds openend/closed, cursor, etc)
autocmd BufWinLeave * silent! mkview
autocmd BufWinEnter * silent! loadview

" nicer comments
autocmd BufNewFile,BufRead *.h,*.php set comments=s:/**,mb:*,ex:*/

" auto-update .vimrc file each time you edit it
augroup VimReload
    au!
    au BufWritePost $MYVIMRC source $MYVIMRC
augroup END

" Magically build interim directories if necessary
function! AskQuit (msg, options, quit_option)
    if confirm(a:msg, a:options) == a:quit_option
        exit
    endif
endfunction

function! EnsureDirExists ()
    let required_dir = expand("%:h")
    if !isdirectory(required_dir)
        call AskQuit("Parent directory '" . required_dir . "' doesn't exist.",
             \ "&Create it\nor &Quit?", 2)

        try
            call mkdir( required_dir, 'p' )
        catch
            call AskQuit("Can't create '" . required_dir . "'",
            \ "&Quit\nor &Continue anyway?", 1)
        endtry
    endif
endfunction

augroup AutoMkdir
    autocmd!
    autocmd BufNewFile * :call EnsureDirExists()
augroup END


" enable omni completion for various languages
autocmd FileType python     set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html       set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css        set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml        set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php        set omnifunc=phpcomplete#CompletePHP
autocmd FileType c          set omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete

" Ruby & rails omnicompletion tweaks
autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading=1
autocmd FileType ruby,eruby let g:rubycomplete_rails=1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global=1
